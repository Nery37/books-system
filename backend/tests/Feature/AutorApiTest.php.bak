<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use App\Models\Autor;

class AutorApiTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    protected function setUp(): void
    {
        parent::setUp();
        // Use database transactions for faster tests
    }

    /** @test */
    public function it_can_list_all_autores()
    {
        // Arrange
        Autor::factory()->count(3)->create();

        // Act
        $response = $this->getJson('/api/v1/autores');

        // Assert
        $response->assertStatus(200)
                ->assertJsonStructure([
                    'success',
                    'data' => [
                        '*' => [
                            'CodAu',
                            'Nome'
                        ]
                    ]
                ]);
        
        $this->assertTrue($response->json('success'));
        $this->assertCount(3, $response->json('data'));
    }

    /** @test */
    public function it_can_create_a_new_autor()
    {
        // Arrange
        $autorData = [
            'CodAu' => 1,
            'Nome' => 'Machado de Assis'
        ];

        // Act
        $response = $this->postJson('/api/v1/autores', $autorData);

        // Assert
        $response->assertStatus(201)
                ->assertJsonStructure([
                    'success',
                    'message',
                    'data' => [
                        'CodAu',
                        'Nome'
                    ]
                ]);

        $this->assertTrue($response->json('success'));
        $this->assertDatabaseHas('autores', $autorData);
    }

    /** @test */
    public function it_can_show_a_specific_autor()
    {
        // Arrange
        $autor = Autor::factory()->create();

        // Act
        $response = $this->getJson("/api/v1/autores/{$autor->CodAu}");

        // Assert
        $response->assertStatus(200)
                ->assertJsonStructure([
                    'success',
                    'data' => [
                        'CodAu',
                        'Nome'
                    ]
                ]);

        $this->assertTrue($response->json('success'));
        $this->assertEquals($autor->CodAu, $response->json('data.CodAu'));
    }

    /** @test */
    public function it_can_update_an_autor()
    {
        // Arrange
        $autor = Autor::factory()->create();
        $updateData = [
            'Nome' => 'José de Alencar'
        ];

        // Act
        $response = $this->putJson("/api/v1/autores/{$autor->CodAu}", $updateData);

        // Assert
        $response->assertStatus(200)
                ->assertJsonStructure([
                    'success',
                    'message',
                    'data' => [
                        'CodAu',
                        'Nome'
                    ]
                ]);

        $this->assertTrue($response->json('success'));
        $this->assertEquals('José de Alencar', $response->json('data.Nome'));
        $this->assertDatabaseHas('autores', [
            'CodAu' => $autor->CodAu,
            'Nome' => 'José de Alencar'
        ]);
    }

    /** @test */
    public function it_can_delete_an_autor()
    {
        // Arrange
        $autor = Autor::factory()->create();

        // Act
        $response = $this->deleteJson("/api/v1/autores/{$autor->CodAu}");

        // Assert
        $response->assertStatus(200)
                ->assertJsonStructure([
                    'success',
                    'message'
                ]);

        $this->assertTrue($response->json('success'));
        $this->assertDatabaseMissing('autores', ['CodAu' => $autor->CodAu]);
    }

    /** @test */
    public function it_validates_required_fields_when_creating_autor()
    {
        // Act
        $response = $this->postJson('/api/v1/autores', []);

        // Assert
        $response->assertStatus(422)
                ->assertJsonValidationErrors(['CodAu', 'Nome']);
    }

    /** @test */
    public function it_validates_unique_codau_when_creating_autor()
    {
        // Arrange
        $existingAutor = Autor::factory()->create(['CodAu' => 1]);
        
        // Act
        $response = $this->postJson('/api/v1/autores', [
            'CodAu' => 1,
            'Nome' => 'Outro Autor'
        ]);

        // Assert
        $response->assertStatus(422)
                ->assertJsonValidationErrors(['CodAu']);
    }

    /** @test */
    public function it_returns_404_when_autor_not_found()
    {
        // Act
        $response = $this->getJson('/api/v1/autores/999');

        // Assert
        $response->assertStatus(404);
    }

    /** @test */
    public function it_validates_nome_max_length()
    {
        // Act
        $response = $this->postJson('/api/v1/autores', [
            'CodAu' => 1,
            'Nome' => str_repeat('a', 41) // More than 40 characters
        ]);

        // Assert
        $response->assertStatus(422)
                ->assertJsonValidationErrors(['Nome']);
    }
}
