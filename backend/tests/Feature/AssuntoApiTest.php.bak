<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use App\Models\Assunto;

class AssuntoApiTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    protected function setUp(): void
    {
        parent::setUp();
        // Use database transactions for faster tests
    }

    /** @test */
    public function it_can_list_all_assuntos()
    {
        // Arrange
        Assunto::factory()->count(3)->create();

        // Act
        $response = $this->getJson('/api/v1/assuntos');

        // Assert
        $response->assertStatus(200)
                ->assertJsonStructure([
                    'success',
                    'data' => [
                        'data' => [
                            '*' => [
                                'id',
                                'descricao'
                            ]
                        ]
                    ]
                ]);
        
        $this->assertTrue($response->json('success'));
        $this->assertCount(3, $response->json('data.data'));
    }

    /** @test */
    public function it_can_create_a_new_assunto()
    {
        // Arrange
        $assuntoData = [
            'CodAs' => 1,
            'Descricao' => 'Literatura Brasileira'
        ];

        // Act
        $response = $this->postJson('/api/v1/assuntos', $assuntoData);

        // Assert
        $response->assertStatus(201)
                ->assertJsonStructure([
                    'success',
                    'message',
                    'data' => [
                        'CodAs',
                        'Descricao'
                    ]
                ]);

        $this->assertTrue($response->json('success'));
        $this->assertDatabaseHas('assuntos', $assuntoData);
    }

    /** @test */
    public function it_can_show_a_specific_assunto()
    {
        // Arrange
        $assunto = Assunto::factory()->create();

        // Act
        $response = $this->getJson("/api/v1/assuntos/{$assunto->CodAs}");

        // Assert
        $response->assertStatus(200)
                ->assertJsonStructure([
                    'success',
                    'data' => [
                        'CodAs',
                        'Descricao'
                    ]
                ]);

        $this->assertTrue($response->json('success'));
        $this->assertEquals($assunto->CodAs, $response->json('data.CodAs'));
    }

    /** @test */
    public function it_can_update_an_assunto()
    {
        // Arrange
        $assunto = Assunto::factory()->create();
        $updateData = [
            'Descricao' => 'Literatura Portuguesa'
        ];

        // Act
        $response = $this->putJson("/api/v1/assuntos/{$assunto->CodAs}", $updateData);

        // Assert
        $response->assertStatus(200)
                ->assertJsonStructure([
                    'success',
                    'message',
                    'data' => [
                        'CodAs',
                        'Descricao'
                    ]
                ]);

        $this->assertTrue($response->json('success'));
        $this->assertEquals('Literatura Portuguesa', $response->json('data.Descricao'));
        $this->assertDatabaseHas('assuntos', [
            'CodAs' => $assunto->CodAs,
            'Descricao' => 'Literatura Portuguesa'
        ]);
    }

    /** @test */
    public function it_can_delete_an_assunto()
    {
        // Arrange
        $assunto = Assunto::factory()->create();

        // Act
        $response = $this->deleteJson("/api/v1/assuntos/{$assunto->CodAs}");

        // Assert
        $response->assertStatus(200)
                ->assertJsonStructure([
                    'success',
                    'message'
                ]);

        $this->assertTrue($response->json('success'));
        $this->assertDatabaseMissing('assuntos', ['CodAs' => $assunto->CodAs]);
    }

    /** @test */
    public function it_validates_required_fields_when_creating_assunto()
    {
        // Act
        $response = $this->postJson('/api/v1/assuntos', []);

        // Assert
        $response->assertStatus(422)
                ->assertJsonValidationErrors(['CodAs', 'Descricao']);
    }

    /** @test */
    public function it_validates_unique_codas_when_creating_assunto()
    {
        // Arrange
        $existingAssunto = Assunto::factory()->create(['CodAs' => 1]);
        
        // Act
        $response = $this->postJson('/api/v1/assuntos', [
            'CodAs' => 1,
            'Descricao' => 'Outro Assunto'
        ]);

        // Assert
        $response->assertStatus(422)
                ->assertJsonValidationErrors(['CodAs']);
    }

    /** @test */
    public function it_returns_404_when_assunto_not_found()
    {
        // Act
        $response = $this->getJson('/api/v1/assuntos/999');

        // Assert
        $response->assertStatus(404);
    }

    /** @test */
    public function it_validates_descricao_max_length()
    {
        // Act
        $response = $this->postJson('/api/v1/assuntos', [
            'CodAs' => 1,
            'Descricao' => str_repeat('a', 21) // More than 20 characters
        ]);

        // Assert
        $response->assertStatus(422)
                ->assertJsonValidationErrors(['Descricao']);
    }
}
